plugins {
    id 'java'
    id 'application'
    id 'maven'  // Required for jitpack.io to do a ./gradlew install
    id 'org.jetbrains.kotlin.jvm' version '1.4.20-RC'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.20-RC'
    id "com.github.ben-manes.versions" version '0.36.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
    maven { url 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    maven { url = 'https://jitpack.io' }
}

// These are for the uber target
def mainName = 'TestMain'
def appName = 'server'

// This is for ./gradlew run
application {
    mainClassName = mainName
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'ReadingBat Core'
group 'com.github.readingbat'
version '1.7.0'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation "com.github.pambrose.common-utils:core-utils:$utils_version"

    implementation "com.github.pambrose.common-utils:ktor-server-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:ktor-client-utils:$utils_version"

    implementation "com.github.pambrose.common-utils:redis-utils:$utils_version"

    implementation "com.github.pambrose.common-utils:script-utils-common:$utils_version"
    implementation "com.github.pambrose.common-utils:script-utils-python:$utils_version"
    implementation "com.github.pambrose.common-utils:script-utils-java:$utils_version"
    implementation "com.github.pambrose.common-utils:script-utils-kotlin:$utils_version"

    implementation "com.github.pambrose.common-utils:guava-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:service-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:prometheus-utils:$utils_version"
    implementation "com.github.pambrose.common-utils:exposed-utils:$utils_version"

    implementation "com.github.pambrose:prometheus-proxy:$proxy_version"

    implementation "io.prometheus:simpleclient:$prometheus_version"

    implementation "ch.obermuhlner:java-scriptengine:$java_script_version"

    implementation "org.jetbrains:kotlin-css:$css_version"
    implementation "org.jetbrains:kotlin-css-jvm:$css_version"

    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"

    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"

    implementation "redis.clients:jedis:$redis_version"

    implementation "com.zaxxer:HikariCP:$hikari_version"

    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    //implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jodatime:$exposed_version"

    implementation "com.impossibl.pgjdbc-ng:pgjdbc-ng-all:$pgjdbc_version"
    implementation "org.postgresql:postgresql:$postgres_version"
    implementation "com.google.cloud.sql:postgres-socket-factory:$cloud_version"

    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.google.guava:guava:$guava_version"

    implementation "com.sendgrid:sendgrid-java:$sendgrid_version"

    implementation "org.apache.commons:commons-text:$commons_version"
    implementation "com.vladsch.flexmark:flexmark:$flexmark_version"

    implementation "org.kohsuke:github-api:$github_api_version"

    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"

    //testImplementation "org.seleniumhq.selenium:selenium-java:$selenium_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

shadowJar {
    zip64 true
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

//java {
//    withSourcesJar()
//}

artifacts {
    archives sourcesJar
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

task uberjar(type: Jar, dependsOn: shadowJar) {
    zip64 true
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-Xuse-experimental=kotlin.contracts.ExperimentalContracts',
                                       '-XXLanguage:+InlineClasses']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-XXLanguage:+InlineClasses']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}