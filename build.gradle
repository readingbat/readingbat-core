buildscript {
    dependencies {
        classpath "org.postgresql:postgresql:$postgres_version"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.7.20' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20' apply false
    id 'org.jmailen.kotlinter' version "3.12.0" apply false
    id 'com.github.gmazzo.buildconfig' version '3.1.0' apply false
    id "com.github.ben-manes.versions" version '0.42.0' apply false
    id "org.flywaydb.flyway" version "9.4.0"
}

ext {
    libraries = [
            serialization         : "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version",

            core_utils            : "com.github.pambrose.common-utils:core-utils:$utils_version",
            ktor_server_utils     : "com.github.pambrose.common-utils:ktor-server-utils:$utils_version",
            ktor_client_utils     : "com.github.pambrose.common-utils:ktor-client-utils:$utils_version",
            redis_utils           : "com.github.pambrose.common-utils:redis-utils:$utils_version",
            script_utils_common   : "com.github.pambrose.common-utils:script-utils-common:$utils_version",
            script_utils_python   : "com.github.pambrose.common-utils:script-utils-python:$utils_version",
            script_utils_java     : "com.github.pambrose.common-utils:script-utils-java:$utils_version",
            script_utils_kotlin   : "com.github.pambrose.common-utils:script-utils-kotlin:$utils_version",
            service_utils         : "com.github.pambrose.common-utils:service-utils:$utils_version",
            prometheus_utils      : "com.github.pambrose.common-utils:prometheus-utils:$utils_version",
            exposed_utils         : "com.github.pambrose.common-utils:exposed-utils:$utils_version",

            prometheus_proxy      : "com.github.pambrose:prometheus-proxy:$proxy_version",

            simple_client         : "io.prometheus:simpleclient:$prometheus_version",

            script_engine         : "ch.obermuhlner:java-scriptengine:$java_script_version",

            css                   : "org.jetbrains.kotlin-wrappers:kotlin-css:$css_version",

            ktor_client_core      : "io.ktor:ktor-client:$ktor_version",
            ktor_client_cio       : "io.ktor:ktor-client-cio:$ktor_version",

            ktor_server_core      : "io.ktor:ktor-server:$ktor_version",
            ktor_server_cio       : "io.ktor:ktor-server-cio:$ktor_version",
            ktor_sessions         : "io.ktor:ktor-server-sessions:$ktor_version",
            ktor_html             : "io.ktor:ktor-server-html-builder:$ktor_version",
            ktor_locations        : "io.ktor:ktor-server-locations:$ktor_version",
            ktor_metrics          : "io.ktor:ktor-server-metrics:$ktor_version",
            ktor_websockets       : "io.ktor:ktor-server-websockets:$ktor_version",
            ktor_compression      : "io.ktor:ktor-server-compression:$ktor_version",
            ktor_calllogging      : "io.ktor:ktor-server-call-logging:$ktor_version",

            khealth               : "dev.hayden:khealth:$khealth_version",

            jedis                 : "redis.clients:jedis:$redis_version",

            hikari                : "com.zaxxer:HikariCP:$hikari_version",
            exposed_core          : "org.jetbrains.exposed:exposed-core:$exposed_version",
            exposed_jdbc          : "org.jetbrains.exposed:exposed-jdbc:$exposed_version",
            exposed_jodatime      : "org.jetbrains.exposed:exposed-jodatime:$exposed_version",
            pgjdbc                : "com.impossibl.pgjdbc-ng:pgjdbc-ng-all:$pgjdbc_version",
            postgres              : "org.postgresql:postgresql:$postgres_version",
            socket                : "com.google.cloud.sql:postgres-socket-factory:$cloud_version",

            gson                  : "com.google.code.gson:gson:$gson_version",

            sendgrid              : "com.sendgrid:sendgrid-java:$sendgrid_version",

            commons               : "org.apache.commons:commons-text:$commons_version",
            flexmark              : "com.vladsch.flexmark:flexmark:$flexmark_version",

            github                : "org.kohsuke:github-api:$github_api_version",

            ktor_server_tests     : "io.ktor:ktor-server-tests:$ktor_version",
            ktor_server_test_host : "io.ktor:ktor-server-test-host:$ktor_version",

            kotest_runner_junit5  : "io.kotest:kotest-runner-junit5:$kotest_version",
            kotest_assertions_core: "io.kotest:kotest-assertions-core:$kotest_version",
            kotest_assertions_ktor: "io.kotest:kotest-assertions-ktor:$kotest_ktor_version",
    ]
}

allprojects {
    description = 'ReadingBat Core'
    group 'com.github.readingbat'
    version '1.32.0'

    apply plugin: 'application'
    apply plugin: 'java-library'  // gradle 7
    apply plugin: 'maven-publish' // required for jitpack.io install  // gradle 7
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    apply plugin: 'com.github.gmazzo.buildconfig'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        maven { url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers" }
        google()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // gradle 7
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

subprojects {
    dependencies {
        // These are required for the annotation args below
        //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        //implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"

        implementation "io.ktor:ktor-server-locations:$ktor_version"

        //implementation "dev.hayden:khealth:$khealth_version"

        implementation "io.github.microutils:kotlin-logging:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"

        runtimeOnly "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    java {
        withSourcesJar()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xbackend-threads=8',
                                 '-opt-in=kotlin.time.ExperimentalTime',
                                 '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                 '-opt-in=kotlin.contracts.ExperimentalContracts',
                                 '-opt-in=kotlinx.coroutines.ObsoleteCoroutinesApi',
                                 '-opt-in=kotlin.ExperimentalStdlibApi',
                                 '-opt-in=io.ktor.server.locations.KtorExperimentalLocationsAPI',
                                 '-opt-in=kotlinx.coroutines.InternalCoroutinesApi',
                                 '-opt-in=kotlinx.coroutines.DelicateCoroutinesApi',
            ]
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xbackend-threads=8']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    kotlinter {
        ignoreFailures = false
        // indentSize = 2
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        disabledRules = ["no-wildcard-imports",
                         "indent",
                         "final-newline",
                         "comment-spacing",
                         "max-line-length",
                         "no-multi-spaces",
                         "wrapping",
                         "multiline-if-else",]
    }
}

flyway {
    driver = 'org.postgresql.Driver'
    url = 'jdbc:postgresql://localhost:5433/readingbat'
    user = 'postgres'
    password = 'docker'
}