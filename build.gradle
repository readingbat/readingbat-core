plugins {
    id 'java'
    //id 'application'
    id 'org.jmailen.kotlinter' version "3.7.0" apply false
    id 'org.jetbrains.kotlin.jvm' version '1.6.0' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.0' apply false
    id 'com.github.gmazzo.buildconfig' version '3.0.3' apply false
    id "com.github.ben-manes.versions" version '0.39.0' apply false
    id "org.flywaydb.flyway" version "8.0.4"
}

ext {
    libraries = [
            kotlinx_coroutines_core: "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version",

            serialization          : "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version",

            core_utils             : "com.github.pambrose.common-utils:core-utils:$utils_version",

            ktor_server_utils      : "com.github.pambrose.common-utils:ktor-server-utils:$utils_version",
            ktor_client_utils      : "com.github.pambrose.common-utils:ktor-client-utils:$utils_version",

            redis_utils            : "com.github.pambrose.common-utils:redis-utils:$utils_version",

            script_utils_common    : "com.github.pambrose.common-utils:script-utils-common:$utils_version",
            script_utils_python    : "com.github.pambrose.common-utils:script-utils-python:$utils_version",
            script_utils_java      : "com.github.pambrose.common-utils:script-utils-java:$utils_version",
            script_utils_kotlin    : "com.github.pambrose.common-utils:script-utils-kotlin:$utils_version",

            //guava_utils            : "com.github.pambrose.common-utils:guava-utils:$utils_version",
            service_utils          : "com.github.pambrose.common-utils:service-utils:$utils_version",
            prometheus_utils       : "com.github.pambrose.common-utils:prometheus-utils:$utils_version",
            exposed_utils          : "com.github.pambrose.common-utils:exposed-utils:$utils_version",

            prometheus_proxy       : "com.github.pambrose:prometheus-proxy:$proxy_version",

            simple_client          : "io.prometheus:simpleclient:$prometheus_version",

            script_engine          : "ch.obermuhlner:java-scriptengine:$java_script_version",

            css                    : "org.jetbrains:kotlin-css:$css_version",
            css_jvm                : "org.jetbrains:kotlin-css-jvm:$css_version",

            ktor_server_core       : "io.ktor:ktor-server-core:$ktor_version",
            ktor_server_cio        : "io.ktor:ktor-server-cio:$ktor_version",
            ktor_client_core       : "io.ktor:ktor-client-core:$ktor_version",
            ktor_client_cio        : "io.ktor:ktor-client-cio:$ktor_version",

            server_sessions        : "io.ktor:ktor-server-sessions:$ktor_version",
            html_builder           : "io.ktor:ktor-html-builder:$ktor_version",
            ktor_locations         : "io.ktor:ktor-locations:$ktor_version",
            ktor_metrics           : "io.ktor:ktor-metrics:$ktor_version",
            ktor_websockets        : "io.ktor:ktor-websockets:$ktor_version",

            jedis                  : "redis.clients:jedis:$redis_version",

            hikari                 : "com.zaxxer:HikariCP:$hikari_version",
            exposed_core           : "org.jetbrains.exposed:exposed-core:$exposed_version",
            exposed_jdbc           : "org.jetbrains.exposed:exposed-jdbc:$exposed_version",
            exposed_jodatime       : "org.jetbrains.exposed:exposed-jodatime:$exposed_version",
            pgjdbc                 : "com.impossibl.pgjdbc-ng:pgjdbc-ng-all:$pgjdbc_version",
            postgres               : "org.postgresql:postgresql:$postgres_version",
            socket                 : "com.google.cloud.sql:postgres-socket-factory:$cloud_version",

            gson                   : "com.google.code.gson:gson:$gson_version",
            //guava                  : "com.google.guava:guava:$guava_version",

            sendgrid               : "com.sendgrid:sendgrid-java:$sendgrid_version",

            commons                : "org.apache.commons:commons-text:$commons_version",
            flexmark               : "com.vladsch.flexmark:flexmark:$flexmark_version",

            github                 : "org.kohsuke:github-api:$github_api_version",

            ktor_server_tests      : "io.ktor:ktor-server-tests:$ktor_version",
            ktor_server_test_host  : "io.ktor:ktor-server-test-host:$ktor_version",

            kotest_runner_junit5   : "io.kotest:kotest-runner-junit5:$kotest_version",
            kotest_assertions_core : "io.kotest:kotest-assertions-core:$kotest_version",
            kotest_assertions_ktor : "io.kotest:kotest-assertions-ktor:$kotest_ktor_version",
    ]
}

allprojects {
    description = 'ReadingBat Core'
    group 'com.github.readingbat'
    version '1.23.3'

    //apply plugin: 'application'
    //apply plugin: 'java-library'
    //apply plugin: 'maven' // required for jitpack.io install        // gradle 7
    apply plugin: 'maven-publish' // required for jitpack.io install  // gradle 7
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    apply plugin: 'com.github.gmazzo.buildconfig'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenLocal()
        maven { url = 'https://kotlin.bintray.com/ktor' }
        maven { url = 'https://kotlin.bintray.com/kotlinx' }
        maven { url = 'https://kotlin.bintray.com/kotlin-js-wrappers' }
        maven { url = 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers' }
        maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // gradle 7
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

subprojects {

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        // These are required for the annotation args below
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
        implementation "io.ktor:ktor-locations:$ktor_version"

        implementation "io.github.microutils:kotlin-logging:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"

        runtimeOnly "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version"
    }

//    shadowJar {
//        zip64 true
//        mergeServiceFiles()
//        exclude "META-INF/*.SF"
//        exclude 'META-INF/*.DSA'
//        exclude 'META-INF/*.RSA'
//        exclude "LICENSE*"
//    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    java {
        withSourcesJar()
    }

//    task sourcesJar(type: Jar) {
//        from sourceSets.main.allJava
//        archiveClassifier.set("sources")
//    }
//
//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        archiveClassifier.set("javadoc")
//        from javadoc.destinationDir
//    }
//
//    publishing {
//        publications {
//            mavenAar(MavenPublication) {
//                from components.java
//                afterEvaluate {
//                    artifact javadocJar
//                    artifact sourcesJar
//                }
//            }
//        }
//    }

    sourceSets {
        all {
            languageSettings {
                optIn('kotlin.time.ExperimentalTime')
                optIn('io.ktor.locations.KtorExperimentalLocationsAPI')
                optIn('kotlinx.coroutines.ExperimentalCoroutinesApi')
                optIn('kotlin.contracts.ExperimentalContracts')
                optIn('kotlinx.serialization.ExperimentalSerializationApi')
                optIn('kotlinx.coroutines.ObsoleteCoroutinesApi')
                optIn('kotlin.ExperimentalStdlibApi')
            }
        }
    }

    compileKotlin {
        kotlinOptions {
            //useIR = true
            jvmTarget = '1.8'
            //freeCompilerArgs += ['-XXLanguage:+InlineClasses']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            //useIR = true
            jvmTarget = '1.8'
            //freeCompilerArgs += ['-XXLanguage:+InlineClasses']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    kotlinter {
        ignoreFailures = false
        indentSize = 2
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        disabledRules = ["no-wildcard-imports", "indent", "final-newline", "comment-spacing", "max-line-length", "no-multi-spaces"]
    }
}

//dependencies {
//    runtime libraries.postgres
//}

flyway {
    driver = 'org.postgresql.Driver'
    url = 'jdbc:postgresql://localhost:5432/readingbat'
    user = 'postgres'
    password = 'docker'
}